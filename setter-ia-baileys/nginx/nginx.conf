events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=1r/s;

    # Upstream definitions
    upstream session_manager {
        least_conn;
        server session-manager:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream message_gateway {
        least_conn;
        server message-gateway:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream user_management {
        least_conn;
        server user-management:3003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream webhook_service {
        least_conn;
        server webhook-service:3004 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream media_service {
        least_conn;
        server media-service:3005 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream analytics_service {
        least_conn;
        server analytics-service:3006 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # API routes with rate limiting
        location /api/v1/auth {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://user_management;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        location /api/v1/users {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://user_management;
            include /etc/nginx/proxy_params;
        }

        location /api/v1/sessions {
            limit_req zone=api burst=30 nodelay;
            proxy_pass http://session_manager;
            include /etc/nginx/proxy_params;
            proxy_read_timeout 120s;
        }

        location /api/v1/messages {
            limit_req zone=api burst=50 nodelay;
            proxy_pass http://message_gateway;
            include /etc/nginx/proxy_params;
        }

        location /api/v1/webhooks {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://webhook_service;
            include /etc/nginx/proxy_params;
        }

        location /api/v1/media {
            limit_req zone=api burst=30 nodelay;
            client_max_body_size 100M;
            proxy_pass http://media_service;
            include /etc/nginx/proxy_params;
            proxy_read_timeout 300s;
        }

        location /api/v1/analytics {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://analytics_service;
            include /etc/nginx/proxy_params;
        }

        # WebSocket support for real-time updates
        location /ws/ {
            proxy_pass http://session_manager;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400;
        }

        # Health checks (no rate limiting)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location ~ ^/api/v1/[^/]+/health$ {
            access_log off;
            limit_req zone=api burst=5 nodelay;
            
            # Route to appropriate service based on path
            if ($uri ~ ^/api/v1/sessions/health$) {
                proxy_pass http://session_manager/health;
            }
            if ($uri ~ ^/api/v1/messages/health$) {
                proxy_pass http://message_gateway/health;
            }
            if ($uri ~ ^/api/v1/users/health$) {
                proxy_pass http://user_management/health;
            }
            if ($uri ~ ^/api/v1/webhooks/health$) {
                proxy_pass http://webhook_service/health;
            }
            if ($uri ~ ^/api/v1/media/health$) {
                proxy_pass http://media_service/health;
            }
            if ($uri ~ ^/api/v1/analytics/health$) {
                proxy_pass http://analytics_service/health;
            }
            
            include /etc/nginx/proxy_params;
        }

        # API documentation
        location /docs {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ \.(env|config)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Default location
        location / {
            return 404 '{"error": {"code": "NOT_FOUND", "message": "Endpoint not found"}}';
            add_header Content-Type application/json;
        }
    }

    # HTTPS server (uncomment and configure when SSL certificates are available)
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     ssl_session_timeout 1d;
    #     ssl_session_cache shared:MozTLS:10m;
    #     ssl_session_tickets off;
    #
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #
    #     # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    #     add_header Strict-Transport-Security "max-age=63072000" always;
    #
    #     # Include all the same location blocks as the HTTP server
    # }
}

# Proxy parameters file content (create this file separately)
# /etc/nginx/proxy_params content:
# proxy_http_version 1.1;
# proxy_set_header Upgrade $http_upgrade;
# proxy_set_header Connection 'upgrade';
# proxy_set_header Host $host;
# proxy_set_header X-Real-IP $remote_addr;
# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# proxy_set_header X-Forwarded-Proto $scheme;
# proxy_cache_bypass $http_upgrade;
# proxy_read_timeout 60s;
# proxy_connect_timeout 10s;
# proxy_send_timeout 60s;